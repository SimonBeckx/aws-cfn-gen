---
- name: Create a complete Application Environment on AWS
  hosts: localhost
  gather_facts: false

  environment:
    AWS_REGION: "{{ target_account.region | default('eu-central-1') }}"

  pre_tasks:
    - name: Pre-tasks block
      block:
        - name: Test AWS_REGION
          shell: "[[ -n $AWS_REGION ]]"
          register: region
          failed_when: false
          changed_when: false
        - name: Test AWS_SECRET_ACCESS_KEY
          shell: "[[ -n $AWS_SECRET_ACCESS_KEY ]]"
          register: secret
          failed_when: false
          changed_when: false
        - name: Test AWS_ACCESS_KEY_ID
          shell: "[[ -n $AWS_ACCESS_KEY_ID ]]"
          register: key
          failed_when: false
          changed_when: false
        - name: Test AWS_SESSION_TOKEN
          shell: "[[ -n $AWS_SESSION_TOKEN ]]"
          register: token
          failed_when: false
          changed_when: false
        - name: Test if config file exists
          stat:
            path: "{{ configfile }}"
          register: configfilestat
          failed_when: false
          changed_when: false
        - name: Do assertions on configfile and AWS credential envvars
          assert:
            that:
              - "configfile is defined"
              - "key.rc == 0"
              - "secret.rc == 0"
              - "region.rc == 0"
              - "token.rc == 0"
              - "configfilestat.stat.exists"
        - name: Disable all alarms during playbook execution
          shell: |
            aws cloudwatch disable-alarm-actions --alarm-names $(aws cloudwatch describe-alarms --query "MetricAlarms[*].AlarmName" --output text)
        - name: Create S3 bucket to hold CloudFormation templates
          shell: |
            if ! aws s3 ls | grep "{{ project.name }}-cfn-templates"
            then
              aws s3 mb "s3://{{ project.name }}-cfn-templates"
            fi

      tags: [ 'always' ]

  post_tasks:
    - name: Post-tasks block
      block:
        - name: Enable all alarms after playbook execution
          shell: |
            aws cloudwatch enable-alarm-actions --alarm-names $(aws cloudwatch describe-alarms --query "MetricAlarms[*].AlarmName" --output text)

      tags: [ 'always' ]

  vars_files:
    - "vars/bitbucket.yml"
    - "{{ configfile }}"

  tasks:
    - name: Facts block
      block:
        - name: Convert project name to alpha numeric camel case
          set_fact:
            cfn_project: "{{ project.name | replace('-', ' ') | replace('.', ' ') | title | replace(' ', '') }}"
        - set_fact:
            project: "{{ project.name }}"
            shortproject: "{{ project.shortname | default(project.name) }}"
      tags: [ 'always' ]

    - name: VPC
      block:
        - name: Create CFN template from Ansible template for the VPC
          template:
            src: "VPC.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpc.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpc.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpc.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpc.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the VPC CloudFormation stack
          cloudformation:
            stack_name: "{{ vpc.stackname }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      tags: [ 'vpc' ]
      when: "vpc is defined"

  ### Collect info from other stacks
  ### Should remain after the VPC creation
    - name: Block for VPC
      block:
      - name: Get facts for the VPC stack
        cloudformation_facts:
          stack_name: "{{ referenced_stacks.VPCStackName }}"
        register: vpcfacts
        tags: [ 'always' ]

      - name: Dump vpcfacts
        debug:
          var: vpcfacts
        tags: [ 'always' ]

      - name: Set more variables
        set_fact:
          iam_stackname: "{{ cfn_project }}IAM"
          vpc_id: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC | default('NA') }}"
          vpc_privatesubnet_routetable: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RouteTablePrivateSubnet }}"
          vpc_publicsubnet_routetable: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.RouteTablePublicSubnet }}"
          vpc_sg_app: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGAPP }}"
          vpc_sg_elb: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
          vpc_privatesubnet_az1: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ1 }}"
          vpc_privatesubnet_az2: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ2 }}"
          vpc_privatesubnet_az3: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ3 }}"
          vpc_elbsubnet_az1: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ1 }}"
          vpc_elbsubnet_az2: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ2 }}"
          vpc_elbsubnet_az3: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ3 }}"
          vpc_nr_of_azs: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.AZs }}"

        tags: [ 'always' ]


      - name: VPCEndPoint
        block:
          - name: Create CFN template from Ansible template for the VPCEndPoints
            template:
              src: "VPCEndpoint.yml"
              dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpcendpoint.yml"
          - name: Put CFN template on s3
            shell: |
              aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-vpcendpoint.yml" \
                        "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpcendpoint.yml"
            tags: [ 'deploy' ]
          - name: Get presigned URL for the template on S3
            shell: |
              aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-vpcendpoint.yml"
            register: presign
            tags: [ 'deploy' ]
          - name: Create or Update the VPC Endpoints CloudFormation stack
            cloudformation:
              stack_name: "{{ cfn_project }}VPCEndpoint"
              state: "present"
              disable_rollback: false
              template_url: "{{ presign.stdout }}"
            tags: [ 'deploy' ]

        tags: [ 'vpc_endpoints', 'vpc' ]

      when: "referenced_stacks is defined and referenced_stacks.VPCStackName is defined"

    - name: ECR
      block:
        - name: Create CFN template from Ansible template for the ECR Repositories
          template:
            src: "ECR.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecr.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecr.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecr.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecr.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECR CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECR"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "ecr is defined"
      tags: [ 'ecr' ]

    - name: ECSMgmt
      block:
        - name: Create CFN template from Ansible template for ECSMgmt
          template:
            src: "ECSMgmt.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecsmgmt.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecsmgmt.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecsmgmt.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecsmgmt.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECSMgmt CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECSMgmt"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "ecsmgmt is defined"
      tags: [ 'ecsmgmt' ]


    - name: Route53Delegation
      block:
        - name: Create template from Ansible template for Route53 Delegation
          template:
            src: "Route53Delegation.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
        - name: Put CFN template for Route53 Delegation on s3
          shell: |
            aws s3 cp \
               "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml" \
               "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the Route53 Delegation template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53delegation-{{ item.hostedzone.id }}.yml"
          with_items: "{{ route53_delegation | default([]) }}"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Route53 Delegation CloudFormation stacks
          cloudformation:
            stack_name: "R53Delegation-{{ item.item.hostedzone.id }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ item.stdout }}"
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]

      tags: [ 'route53delegation' ]

    - name: IAM
      block:
        - name: Create CFN template from Ansible template for the IAM resources
          template:
            src: "IAM.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-iam.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-iam.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-iam.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-iam.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the IAM Stack
          cloudformation:
            stack_name: "{{ cfn_project }}IAM"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: awsroles is defined or managed_policies is defined
      tags: [ 'iam' ]

    - name: Lambda
      block:
        - name: Get unique version_id to name the Lambda version resource
          shell: openssl rand -hex 12
          register: openssl
        - name: Save version_id
          set_fact:
            version_id: "{{ openssl.stdout }}"
        - name: Create CFN template from Ansible template for the Lambda functions
          template:
            src: "Lambda.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambda.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambda.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambda.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambda.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Lambda CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}Lambda"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "lambda_functions is defined"
      tags: [ 'lambda' ]

    - name: LambdaCloudfront
      block:
        - name: Get unique version_id to name the Lambda version resource
          shell: openssl rand -hex 12
          register: openssl
        - name: Save version_id
          set_fact:
            version_id: "{{ openssl.stdout }}"
        - name: Create CFN template from Ansible template for the Lambda functions in us-east-1
          template:
            src: "LambdaCloudfront.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambdacloudfront.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-lambdacloudfront.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambdacloudfront.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-lambdacloudfront.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Lambda CloudFormation stack
          cloudformation:
            region: us-east-1
            stack_name: "{{ cfn_project }}LambdaCloudfront"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "lambda_functions_cloudfront is defined"
      tags: [ 'lambdacloudfront' ]

    - name: EFS
      block:
        - name: Create CFN template from Ansible template for the EFS Filesystems
          template:
            src: "EFS.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-efs.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-efs.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-efs.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-efs.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the EFS CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}EFS"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "efs is defined"
      tags: [ 'efs' ]

    - name: DynamoDB
      block:
        - name: Create CFN template from Ansible template for DynamoDB tables
          template:
            src: "DynamoDB.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-dynamodb.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-dynamodb.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-dynamodb.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-dynamodb.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the DynamoDB CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}DynamoDB"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order: 0
          tags: [ 'deploy' ]

      when: "dynamodb is defined"
      tags: [ 'dynamodb' ]

    - name: Loadbalancers
      block:
        - name: Create template from Ansible template for the LoadBalancers
          template:
            src: "ALB.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp \
               "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-alb-{{ item.name }}.yml" \
               "s3://{{ project }}-cfn-templates/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-alb-{{ item.name }}.yml"
          with_items: "{{ loadbalancers | default([]) }}"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Elastic LoadBalancer CloudFormation stacks
          cloudformation:
            stack_name: "{{ cfn_project }}LB{{ item.item.name }}"
            state: "present"
            disable_rollback: false
            template_url: "{{ item.stdout }}"
            tags:
              stack_deletion_order: 30
          with_items: "{{ presign.results }}"
          tags: [ 'deploy' ]

      tags: [ 'ecs', 'alb' ]

    - name: SNS
      block:
      - name: Create CFN template from Ansible template for the SNS Topics
        template:
          src: "SNS.yml"
          dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sns.yml"
      - name: Put SNS CFN template on s3
        shell: |
          aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-sns.yml" \
                    "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sns.yml"
        tags: [ 'deploy' ]
      - name: Get presigned URL for the SNS template on S3
        shell: |
          aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-sns.yml"
        register: presign
        tags: [ 'deploy' ]
      - name: Create or Update the SNS CloudFormation stack
        cloudformation:
          stack_name: "{{ cfn_project }}SNS"
          state: "present"
          disable_rollback: false
          template_url: "{{ presign.stdout }}"
        tags: [ 'deploy' ]

      when: "sns is defined"
      tags: [ 'sns' ]

    - name: CloudFront
      block:
        - name: Create CFN template from Ansible template for the CloudFront CDNs
          template:
            src: "CloudFront.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cloudfront.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-cloudfront.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cloudfront.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-cloudfront.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the CloudFront CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}CloudFront"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: "cloudfront_distributions is defined"
      tags: [ 'cloudfront' ]

    - name: Route 53
      block:
        - name: Create template from Ansible template for the Route53 Hosted Zones
          template:
            src: "Route53.yml"
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-route53.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-route53.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the Route53 Hosted Zones CloudFormation stacks
          cloudformation:
            stack_name: "{{ cfn_project }}Route53"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order: 20
          tags: [ 'deploy' ]

      when: route53 is defined and route53.private_hosted_zones is defined
      tags: [ 'createstack', 'route53', 'ecs' ]

    - name: ECS Cluster
      block:
        - name: Create CFN template from Ansible template for the ECS Cluster
          template:
            src: ECS.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-ecs.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-ecs.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the ECS CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}ECS"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
            tags:
              stack_deletion_order: 10
          tags: [ 'deploy' ]

      when: ecs is defined
      tags: [ 'ecs' ]

    - name: S3 buckets
      block:
        - name: Create CFN template from Ansible template for project S3 buckets
          template:
            src: S3.yml
            dest: "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-s3.yml"
        - name: Put CFN template on s3
          shell: |
            aws s3 cp "{{ generated_files_dir | default('generated-files') }}/cfn-{{ project }}-s3.yml" \
                      "s3://{{ project }}-cfn-templates/cfn-{{ project }}-s3.yml"
          tags: [ 'deploy' ]
        - name: Get presigned URL for the template on S3
          shell: |
            aws s3 presign "s3://{{ project }}-cfn-templates/cfn-{{ project }}-s3.yml"
          register: presign
          tags: [ 'deploy' ]
        - name: Create or Update the S3 CloudFormation stack
          cloudformation:
            stack_name: "{{ cfn_project }}S3"
            state: "present"
            disable_rollback: false
            template_url: "{{ presign.stdout }}"
          tags: [ 'deploy' ]

      when: s3 is defined
      tags: [ 's3' ]
