---
- name: Create a complete Application Environment on AWS
  hosts: localhost
  gather_facts: false

  environment:
    AWS_REGION: "{{ target_account.region | default('eu-central-1') }}"

  pre_tasks:
    - name: Pre-tasks block
      block:
        - name: Test AWS_REGION
          shell: "[[ -n $AWS_REGION ]]"
          register: region
          failed_when: false
          changed_when: false
        - name: Test AWS_SECRET_ACCESS_KEY
          shell: "[[ -n $AWS_SECRET_ACCESS_KEY ]]"
          register: secret
          failed_when: false
          changed_when: false
        - name: Test AWS_ACCESS_KEY_ID
          shell: "[[ -n $AWS_ACCESS_KEY_ID ]]"
          register: key
          failed_when: false
          changed_when: false
        - name: Test AWS_SESSION_TOKEN
          shell: "[[ -n $AWS_SESSION_TOKEN ]]"
          register: token
          failed_when: false
          changed_when: false
        - name: Test if config file exists
          stat:
            path: "{{ configfile }}"
          register: configfilestat
          failed_when: false
          changed_when: false
        - name: Do assertions on configfile and AWS credential envvars
          assert:
            that:
              - "configfile is defined"
              - "key.rc == 0"
              - "secret.rc == 0"
              - "region.rc == 0"
              - "token.rc == 0"
              - "configfilestat.stat.exists"

      tags: [ 'always' ]


  vars_files:
    - "{{ configfile }}"

  tasks:
    ### Set some facts
    - name: Facts block
      block:
        - name: Convert project name to alpha numeric camel case
          set_fact:
            cfn_project: "{{ project.name | replace('-', ' ') | replace('.', ' ') | title | replace(' ', '') }}"
        - set_fact:
            project: "{{ project.name }}"
            shortproject: "{{ project.shortname | default(project.name) }}"
      tags: [ 'always' ]
    ### Collect info from other stacks
    - name: Get facts for the VPC stack
      cloudformation_facts:
        stack_name: "{{ referenced_stacks.VPCStackName }}"
      register: vpcfacts
      tags: [ 'always' ]

    - name: Set more variables
      set_fact:
        iam_stackname: "{{ cfn_project }}IAM"
      tags: [ 'always' ]

    ### IAM Resources
    - name: Create CFN template from Ansible template for the IAM resources
      template:
        src: "IAM.yml"
        dest: "generated-files/cfn-{{ project }}-iam.yml"
      when: roles is defined or managed_policies is defined
      tags: [ 'createcfntemplate_iam', 'iam' ]
    - name: Create or Update the IAM Stack
      cloudformation:
        stack_name: "{{ cfn_project }}IAM"
        state: "present"
        disable_rollback: false
        template: "generated-files/cfn-{{ project }}-iam.yml"
      when: roles is defined or managed_policies is defined
      tags: [ 'iam' ]

    ### Route53 Hosted Zones
    - name: Create template from Ansible template for the Route53 Hosted Zones
      template:
        src: "Route53.yml"
        dest: "generated-files/cfn-{{ project }}-route53.yml"
      when: route53 is defined
      tags: [ 'createcfntemplate', 'route53' ]
    - name: Create or Update the Route53 Hosted Zones CloudFormation stacks
      cloudformation:
        stack_name: "{{ cfn_project }}Route53"
        state: "present"
        disable_rollback: false
        template: "generated-files/cfn-{{ project }}-route53.yml"
      when: route53 is defined
      tags: [ 'createstack', 'route53' ]

    ### Loadbalancers
    - name: Create template from Ansible template for the LoadBalancers
      template:
        src: "ALB.yml"
        dest: "generated-files/cfn-{{ project }}-alb-{{ item.name }}.yml"
      with_items: "{{ loadbalancers | default([]) }}"
      tags: [ 'createcfntemplate', 'alb' ]
    - name: Create or Update the Elastic LoadBalancer CloudFormation stacks
      cloudformation:
        stack_name: "{{ cfn_project }}LB{{ item.name }}"
        state: "present"
        disable_rollback: false
        template: "generated-files/cfn-{{ project }}-alb-{{ item.name }}.yml"
      with_items: "{{ loadbalancers | default([]) }}"
      register: lbstacks
      tags: [ 'createstack', 'alb' ]

    ### ECS Cluster
    - name: Create CFN template from Ansible template for the ECS Cluster
      template:
        src: ECS.yml
        dest: "generated-files/cfn-{{ project }}-ecs.yml"
      when: ecs is defined
      tags: [ 'createcfntemplate', 'ecs' ]
    - name: Create or Update the ECS CloudFormation stack
      cloudformation:
        stack_name: "{{ cfn_project }}ECS"
        state: "present"
        disable_rollback: false
        template: "generated-files/cfn-{{ project }}-ecs.yml"
      when: ecs is defined
      tags: [ 'createstack' ]

    ### S3 buckets
    - name: Create CFN template from Ansible template for project S3 buckets
      template:
        src: S3.yml
        dest: "generated-files/cfn-{{ project }}-s3.yml"
      when: s3 is defined
      tags: [ 'createcfntemplate', 's3' ]
    - name: Create or Update the S3 CloudFormation stack
      cloudformation:
        stack_name: "{{ cfn_project }}S3"
        state: "present"
        disable_rollback: false
        template: "generated-files/cfn-{{ project }}-s3.yml"
      when: s3 is defined
      tags: [ 'createstack', 's3' ]



