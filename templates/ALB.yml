AWSTemplateFormatVersion: "2010-09-09"
Description: Create loadbalancer {{ item.name }}

Resources:
  LB{{ item.name }}:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "lb-{{ project }}-{{ item.name }}"
      Scheme: "{{ item.scheme }}"
      Type: "application"
{% if "internal" in item.scheme %}
      SecurityGroups:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGAPP }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
      Subnets:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ1 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ2 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ3 }}"
{% else %}
      SecurityGroups:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
      Subnets:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ1 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ2 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ3 }}"
{% endif %}

{% if "internal" not in item.scheme %}
  Listener{{ item.name }}:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TGDefaultHTTPS'
      LoadBalancerArn: !Ref 'LB{{ item.name }}'
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: {{ item.certificate_arn }}
  Listener{{ item.name }}HTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TGDefaultHTTP'
      LoadBalancerArn: !Ref 'LB{{ item.name }}'
      Port: '80'
      Protocol: HTTP
{% else %}
  Listener{{ item.name }}:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TGDefaultHTTP'
      LoadBalancerArn: !Ref 'LB{{ item.name }}'
      Port: '80'
      Protocol: HTTP
{% endif %}

  TGDefaultHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: "LB{{ item.name }}"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: {{ item.def_tg_https_healthcheckpath | default('/') }}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: tg-{{ shortproject }}-{{ item.name | lower }}-def-443
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC }}"

  TGDefaultHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: "LB{{ item.name }}"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath:  {{ item.def_tg_http_healthcheckpath | default('/') }}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: tg-{{ shortproject }}-{{ item.name | lower }}-def-80
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC }}"

  ## Create configuration for redirects
{% for redirect in item.redirects | default([]) %}
  ### Redirect feature not yet available in CloudFormation, skipping this step for now
{%   if "feature" == "feature" %}
  RedirAction{{ redirect.url | replace('.', ' ') | title | replace(' ', '') }}:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener{{ item.name }}
      Priority: "{{ redirect.priority }}"
      Conditions:
        - Field: host-header
          Values:
            - "{{ redirect.url }}"
      Actions:
        - Type: redirect
          RedirectConfig:
            StatusCode: "{{ redirect.status_code | default('HTTP_301') }}"
            Host: "{{ redirect.to | default('#{host}') }}"
            Path: "{{ redirect.path | default('#{path}') }}"
            Port: "{{ redirect.port | default('#{port}') }}"
            Protocol: "{{ redirect.protocol | default('#{protocol}') }}"
            Query: "{{ redirect.query | default('#{query}') }}"
{%   endif %}
{%   if redirect.skiproute53 is not defined or not redirect.skiproute53 %}
  ### Route53 (does not yet support creation of APEX alias)
  RedirR53{{ redirect.url | replace('.', ' ') | title | replace(' ', '') }}:
    Type: Custom::CNAME
    Properties:
      ServiceToken: {{ redirect.sns_topic_arn_for_r53 }}
      Source: "{{ redirect.url }}."
      Target: !GetAtt LB{{ item.name }}.DNSName
      RecordType: CNAME
{%   endif %}
{% endfor %}

  ## Create application listener rules
{% for app in applicationconfig | default([]) %}
{%   if app.domains is defined and app.lb.name == item.name %}
{%     for dom in app.domains %}
  ListenerRule{{ cfn_project }}{{ app.cfn_name }}{{ dom.cfn_name }}{{ dom.listener_rule_path_pattern | default("All") | replace('*', 'Star') | replace('/', ' ') | title | replace(' ', '') }}:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TGApp{{ cfn_project }}{{ item.name }}{{ app.cfn_name }}"
      Conditions:
        - Field: host-header
          Values:
            - "{{ dom.listener_rule_host_header }}"
{%       if dom.listener_rule_path_pattern is defined %}
        - Field: path-pattern
          Values:
            - "{{ dom.listener_rule_path_pattern }}"
{%       endif %}
      ListenerArn: !Ref "Listener{{ item.name }}"
      Priority: {{ dom.priority }}

{%     endfor %}


  ## Create the application target groups
  TGApp{{ cfn_project }}{{ item.name }}{{ app.cfn_name }}:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: "LB{{ item.name }}"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: {{ app.lb.healthcheckpath | default('/') }}
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: {{ app.lb.healthcheckokcode | default('200-299') }}
      Name: {{ ('tg-' + shortproject + '-' + (item.name | lower) + '-' + (app.name | lower)) | truncate(32, True, '', 0) }}
      Port: 80
      Protocol: HTTP
{%     if app.lb.sticky is defined and app.lb.sticky %}
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: "true"
        - Key: "stickiness.type"
          Value: "lb_cookie"
{%     endif %}
      UnhealthyThresholdCount: 2
      VpcId: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC }}"

{%   endif %}
{% endfor %}

Outputs:
  {{ item.name }}:
    Value: !Ref "LB{{ item.name }}"
    Description: "{{ item.description | default(item.name) }}"
    Export:
      Name: !Sub "${AWS::StackName}-{{ item.name }}"
  {{ item.name }}DNS:
    Value: !GetAtt LB{{ item.name }}.DNSName
    Description: "{{ item.description | default(item.name) }} DNS name"
    Export:
      Name: !Sub "${AWS::StackName}-{{ item.name }}DNS"
  {{ item.name }}CanonicalHostedZoneID:
    Value: !GetAtt LB{{ item.name }}.CanonicalHostedZoneID
    Description: "{{ item.description | default(item.name) }}"
    Export:
      Name: !Sub "${AWS::StackName}-{{ item.name }}CanonicalHostedZoneID"
  TGDefaultHTTP:
    Value: !Ref "TGDefaultHTTP"
    Description: "Default Target Group for HTTP."
    Export:
      Name: !Sub "${AWS::StackName}-tg-{{ shortproject }}-{{ item.name | lower }}-def-80"
  TGDefaultHTTPS:
    Value: !Ref "TGDefaultHTTPS"
    Description: "Default Target Group for HTTPS."
    Export:
      Name: !Sub "${AWS::StackName}-tg-{{ shortproject }}-{{ item.name | lower }}-def-443"
{% for app in applicationconfig | default([]) %}
{%   if app.domains is defined and app.lb.name == item.name %}
  TGApp{{ cfn_project }}{{ item.name }}{{ app.cfn_name }}:
    Value: !Ref "TGApp{{ cfn_project }}{{ item.name }}{{ app.cfn_name }}"
    Description: "Target Group for application {{ app.name }} in project {{ project }}."
    Export:
      Name: !Sub "${AWS::StackName}-{{ ('tg-' + shortproject + '-' + (item.name | lower) + '-' + (app.name | lower)) | truncate(32, True, '', 0) }}"
{%   endif %}
{% endfor %}
