AWSTemplateFormatVersion: "2010-09-09"
Description: Create loadbalancer {{ item.name }}

Resources:
  LB{{ cfn_project }}{{ item.name }}:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "lb-{{ project }}-{{ item.name }}"
      Scheme: "{{ item.scheme }}"
      Type: "application"
{% if "internal" in item.scheme %}
      SecurityGroups:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGAPP }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
      Subnets:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ1 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ2 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.PrivateSubnetAZ3 }}"
{% else %}
      SecurityGroups:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.SGELB }}"
      Subnets:
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ1 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ2 }}"
        - "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.ELBSubnetAZ3 }}"
{% endif %}

{% if "internal" not in item.scheme %}
  Listener{{ cfn_project }}{{ item.name }}HTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TG{{ cfn_project }}DefaultHTTPS'
      LoadBalancerArn: !Ref 'LB{{ cfn_project }}{{ item.name }}'
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: {{ item.certificate_arn }}
{% endif %}
  Listener{{ cfn_project }}{{ item.name }}HTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'TG{{ cfn_project }}DefaultHTTP'
      LoadBalancerArn: !Ref 'LB{{ cfn_project }}{{ item.name }}'
      Port: '80'
      Protocol: HTTP

  TG{{ cfn_project }}DefaultHTTPS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: "LB{{ cfn_project }}{{ item.name }}"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: tg-{{ project }}-{{ item.name | lower }}-def-443
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC }}"
  TG{{ cfn_project }}DefaultHTTP:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: "LB{{ cfn_project }}{{ item.name }}"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: tg-{{ project }}-{{ item.name | lower }}-def-80
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: "{{ vpcfacts.ansible_facts.cloudformation[referenced_stacks.VPCStackName].stack_outputs.VPC }}"


Outputs:
  {{ item.name }}:
    Value: !Ref "LB{{ cfn_project }}{{ item.name }}"
    Description: "{{ item.description | default(item.name) }}"
    Export:
      Name: !Sub "${AWS::StackName}-{{ item.name }}"
